{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","components/Order/Summary/Summary.module.css","containers/Checkout/ContactData/ContactData.module.css","components/Order/Summary/Summary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_Input_module_css__WEBPACK_IMPORTED_MODULE_1__","_Input_module_css__WEBPACK_IMPORTED_MODULE_1___default","Input","props","validationError","inputClasses","style","InputElement","invalid","shouldValidate","touched","push","Invalid","a","createElement","className","ValidationError","elementConfig","placeholder","inputElement","elementType","Object","assign","join","value","onChange","changed","options","map","option","key","displayValue","Label","label","module","exports","Summary","ContactData","react_default","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancel","checkoutContinue","state","orderForm","name","type","validation","required","minLength","valid","street","zipCode","maxLength","country","email","deliveryMethod","formIsValid","orderHandler","event","preventDefault","formData","_this","order","ings","orderPrice","price","orderData","userId","onOrderBurger","token","inputChangeHandler","id","updatedForm","objectSpread","updatedItem","target","validationCheck","elementItem","setState","_this2","this","formElements","config","form","onSubmit","element","disabled","loading","Spinner","Component","connect","burgerBuilder","totalOrderPrice","auth","dispatch","orderActions","withErrorHandler","axios","Checkout","cancelCheckout","history","goBack","continueCheckout","replace","summary","Redirect","to","purchaseRedirect","purchased","Order_Summary_Summary","Route","path","component"],"mappings":"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","file":"static/js/1.97436a28.chunk.js","sourcesContent":["import React from \"react\";\nimport style from \"./Input.module.css\";\n\nconst Input = (props) =>{\n    \n    let validationError = null;\n    const inputClasses = [style.InputElement];\n    // ShouldValidate Needed So We Don't Try To Validate Dropdown Box\n    if(props.invalid && props.shouldValidate && props.touched){\n        inputClasses.push(style.Invalid);\n        validationError = <p className={style.ValidationError}>{props.elementConfig.placeholder} Error: Please Enter A Valid Value</p>\n    }\n\n    let inputElement = null;\n    switch(props.elementType){\n        case(\"input\"):\n            inputElement = <input \n                className={inputClasses.join(\" \")} \n                {...props.elementConfig} \n                value={props.value}\n                onChange={props.changed}/>;\n            break; \n        case(\"textarea\"):\n            inputElement = <textarea\n                className={inputClasses.join(\" \")} \n                {...props.elementConfig} \n                value={props.value}\n                onChange={props.changed}/>;\n            break;\n        case(\"select\"):\n            inputElement = (\n                <select\n                    className={inputClasses.join(\" \")} \n                    value={props.value}\n                    onChange={props.changed}\n                >\n                    {props.elementConfig.options.map(option =>(\n                        <option value={option.value} key={option.value}>\n                            {option.displayValue}\n                        </option>\n                    ))}\n                </select>\n            );\n            break;    \n        default:\n            inputElement = <input \n                className={inputClasses.join(\" \")} \n                {...props.elementConfig} \n                value={props.value}\n                onChange={props.changed}/>\n    }\n    \n    return(\n        <div className={style.Input}>\n            <label className={style.Label}>{props.label}</label>\n            {inputElement}\n            {validationError}\n        </div>\n    );\n}\n\nexport default Input; ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__CkPMQ\",\"Label\":\"Input_Label__OEszu\",\"InputElement\":\"Input_InputElement__2Q_MM\",\"Invalid\":\"Input_Invalid__1Xw6D\",\"ValidationError\":\"Input_ValidationError__2H7jo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Summary\":\"Summary_Summary__31uNN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__3IdwX\"};","import React from \"react\";\nimport Burger from \"../../Burger/Burger\"\nimport Button from \"../../UI/Button/Button\";\nimport style from \"./Summary.module.css\";\n\n\nconst Summary = (props) =>{\n    return(\n        <div className={style.Summary}>\n            <h1>Order Summary</h1>\n            <div style={{width: \"100%\", margin: \"20px, auto\"}}>\n                <Burger ingredients={props.ingredients}/>\n            </div>\n            <div>\n                <Button btnType=\"Danger\" clicked={props.checkoutCancel}>Cancel</Button>\n                <Button btnType=\"Success\" clicked={props.checkoutContinue}>Order Now</Button>\n            </div>\n        </div>\n    );\n}\n\nexport default Summary;","import React, {Component} from \"react\";\nimport Button from \"../../../components/UI/Button/Button\";\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\nimport Input from \"../../../components/UI/Input/Input\";\nimport style from \"./ContactData.module.css\";\nimport axios from \"../../../API/Axios/Axios-Orders\";\nimport {connect} from \"react-redux\";\nimport withErrorHandler from \"../../HOC/ErrorHandler/ErrorHandler\";\nimport * as orderActions from \"../../../store/actions/index\";\nimport {validationCheck} from \"../../../constants/utilities\";\n\nclass ContactData extends Component{\n    \n    state={\n        // elementConfig passed to Input via spread operator with props that automatically \n        // passes along the nested config object for required html attributes\n        orderForm:{\n            name: {\n                value: \"\",\n                elementType: \"input\",\n                elementConfig: {\n                    type: \"text\",\n                    placeholder: \"Name\"   \n                },\n                validation: {\n                    required: true,\n                    minLength: 3,\n                    valid: false\n                },\n                touched: false\n            },\n            street: {\n                value: \"\",\n                elementType: \"input\",\n                elementConfig: {\n                    type: \"text\",\n                    placeholder: \"Street\"   \n                },\n                validation: {\n                    required: true,\n                    minLength: 3,\n                    valid: false\n                },\n                touched: false\n            },\n            zipCode: {\n                value: \"\",\n                elementType: \"input\",\n                elementConfig: {\n                    type: \"text\",\n                    placeholder: \"Postal Code\"   \n                },\n                validation: {\n                    required: true,\n                    minLength: 3,\n                    maxLength: 10,\n                    valid: false\n                },\n                touched: false\n            },\n            country: {\n                value: \"\",\n                elementType: \"input\",\n                elementConfig: {\n                    type: \"text\",\n                    placeholder: \"Country\"   \n                },\n                validation: {\n                    required: true,\n                    minLength: 3,\n                    valid: false\n                },\n                touched: false\n            },\n            email: {\n                value: \"\",\n                elementType: \"input\",\n                elementConfig: {\n                    type: \"email\",\n                    placeholder: \"Email\"   \n                },\n                validation: {\n                    required: true,\n                    minLength: 3,\n                    maxLength: 100,\n                    valid: false\n                },\n                touched: false\n            },\n            deliveryMethod: {\n                value: \"fastest\",\n                elementType: \"select\",\n                elementConfig: {\n                    options: [\n                        {value: \"fastest\", displayValue: \"Fastest\"},\n                        {value: \"cheapest\", displayValue: \"Cheapest\"}\n                    ]\n                },\n                validation: {\n                    required: false,\n                    valid: false\n                },\n                touched: false\n            }\n        },\n        formIsValid: false\n    }\n\n    orderHandler = (event) =>{\n        event.preventDefault();\n        // console.log('Contact Data Props: ', this.props.ingredients);\n        const formData = {};\n        for(let key in this.state.orderForm){\n            formData[key] = this.state.orderForm[key].value;\n        }\n        // console.log(formData);\n\n        let order = {\n            ingredients: this.props.ings,\n            orderPrice: this.props.price,\n            orderData: formData,\n            userId: this.props.userId\n        }\n        \n        // Sets purchased to True in Redux\n        this.props.onOrderBurger(order, this.props.token);\n    }\n\n    inputChangeHandler = (event, id) =>{\n        // Input Values Stored In event.target.value\n        // console.log(event.target.value);\n        // Copy State So It Is Immutable\n        const updatedForm = {\n            ...this.state.orderForm\n        }\n        // Copy Nested Object \n        const updatedItem = {\n            ...updatedForm[id]\n        }\n        // Update Value Of Copied Nested Object\n        updatedItem.value = event.target.value;\n        // Run Validation\n        updatedItem.validation.valid = validationCheck(updatedItem.value, updatedItem.validation);\n        // Update To Show Input Was Modified\n        updatedItem.touched = true;\n        // Update Value Of Copied State With Copy Object\n        updatedForm[id] = updatedItem;\n\n        // Loop To Verify Form Is Valid\n        let formIsValid = true;\n        for (let elementItem in updatedForm){\n            if(updatedForm[elementItem].validation.required === true){\n                if(updatedForm[elementItem].validation.valid === false){\n                    formIsValid = false;\n                }\n            }\n        }\n\n        // Set State With The Copy Of State\n        this.setState({orderForm : updatedForm, formIsValid : formIsValid});\n    }\n\n    render(){\n\n        let formElements = [];\n        for(let key in this.state.orderForm){\n            formElements.push({\n                id: key,\n                config: this.state.orderForm[key]\n            })\n        };\n\n        let form = (\n            <form onSubmit={this.orderHandler}>\n                {formElements.map( element => (\n                    <Input \n                        key={element.id} \n                        elementType={element.config.elementType} \n                        elementConfig={element.config.elementConfig} \n                        value={element.config.value}\n                        invalid={!element.config.validation.valid}\n                        shouldValidate={element.config.validation.required}\n                        touched={element.config.touched}\n                        changed={(event)=>this.inputChangeHandler(event, element.id)}\n                    />\n                ))}\n                <Button btnType=\"Success\" disabled={!this.state.formIsValid}>Order</Button>\n            </form>\n        );\n        if(this.props.loading){\n            form=<Spinner/>\n        }\n\n        return(\n            <div className={style.ContactData}>\n                <h4>Enter Contact Data</h4>\n                {form}\n\n\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) =>{\n    return{\n        ings: state.burgerBuilder.ingredients,\n        price: state.burgerBuilder.totalOrderPrice,\n        loading: state.order.loading,\n        token: state.auth.token,\n        userId: state.auth.userId\n    }   \n}\n\nconst mapDispatchToProps = (dispatch) =>{\n    return{\n        onOrderBurger: (orderData, token)=>dispatch(orderActions.purchaseBurger(orderData, token)) \n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","import React, {Component} from \"react\";\nimport Summary from \"../../components/Order/Summary/Summary\";\nimport ContactData from \"./ContactData/ContactData\";\nimport {Route, Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\n\nclass Checkout extends Component{\n\n    cancelCheckout=()=>{\n        this.props.history.goBack();\n    }\n\n    continueCheckout=()=>{\n        this.props.history.replace(\"/checkout/contact-data\");\n    }\n    \n    render(){\n        // Redirects If No Ingredients (Happens If User Reloads Page)\n        let summary = <Redirect to=\"/\"/>;\n        if(this.props.ings){\n            const purchaseRedirect = this.props.purchased ? <Redirect to=\"/\"/> : null;\n            summary = (\n                <div>\n                    {purchaseRedirect}\n                    <Summary \n                        ingredients={this.props.ings}\n                        checkoutCancel={this.cancelCheckout}\n                        checkoutContinue={this.continueCheckout}\n                    />\n\n                    {/* Render Checkout */}\n                    <Route path={\"/checkout/contact-data\"} component={ContactData} />\n                </div>\n            )  \n        }\n        return summary;\n    }\n}\n\nconst mapStateToProps = (state) =>{\n    return{\n        ings: state.burgerBuilder.ingredients,\n        price: state.burgerBuilder.totalOrderPrice,\n        purchased: state.order.purchased\n    }   \n}\n\nexport default connect(mapStateToProps)(Checkout)   ;"],"sourceRoot":""}