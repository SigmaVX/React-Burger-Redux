{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","containers/Checkout/ContactData/ContactData.module.css","components/Order/Summary/Summary.module.css","containers/Checkout/ContactData/ContactData.js","components/Order/Summary/Summary.js","containers/Checkout/Checkout.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_Input_module_css__WEBPACK_IMPORTED_MODULE_1__","_Input_module_css__WEBPACK_IMPORTED_MODULE_1___default","Input","props","validationError","inputClasses","style","InputElement","invalid","shouldValidate","touched","push","Invalid","a","createElement","className","ValidationError","elementConfig","placeholder","inputElement","elementType","Object","assign","join","value","onChange","changed","options","map","option","key","displayValue","Label","label","module","exports","ContactData","ContactDataWrapper","BurgerWrapper","ButtonWrapper","Summary","Sumary","state","orderForm","name","type","validation","required","minLength","valid","street","zipCode","maxLength","country","email","deliveryMethod","formIsValid","orderHandler","event","preventDefault","formData","_this","order","ingredients","ings","orderPrice","price","orderData","userId","onOrderBurger","token","inputChangeHandler","id","updatedForm","objectSpread","updatedItem","target","validationCheck","elementItem","setState","_this2","this","formElements","config","form","react_default","onSubmit","element","Button","btnType","disabled","loading","Spinner","Component","connect","burgerBuilder","totalOrderPrice","auth","dispatch","orderActions","withErrorHandler","axios","Burger","Checkout_ContactData_ContactData","clicked","checkoutCancel","Checkout","cancelCheckout","history","goBack","continueCheckout","replace","window","scrollTo","document","getElementById","backgroundColor","summary","Redirect","to","purchaseRedirect","purchased","Order_Summary_Summary","checkoutContinue"],"mappings":"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","file":"static/js/1.2bed2654.chunk.js","sourcesContent":["import React from \"react\";\nimport style from \"./Input.module.css\";\n\nconst Input = (props) =>{\n    \n    let validationError = null;\n    const inputClasses = [style.InputElement];\n    // ShouldValidate Needed So We Don't Try To Validate Dropdown Box\n    if(props.invalid && props.shouldValidate && props.touched){\n        inputClasses.push(style.Invalid);\n        validationError = <p className={style.ValidationError}>{props.elementConfig.placeholder} Error: Please Enter A Valid Value</p>\n    }\n\n    let inputElement = null;\n    switch(props.elementType){\n        case(\"input\"):\n            inputElement = <input \n                className={inputClasses.join(\" \")} \n                {...props.elementConfig} \n                value={props.value}\n                onChange={props.changed}/>;\n            break; \n        case(\"textarea\"):\n            inputElement = <textarea\n                className={inputClasses.join(\" \")} \n                {...props.elementConfig} \n                value={props.value}\n                onChange={props.changed}/>;\n            break;\n        case(\"select\"):\n            inputElement = (\n                <select\n                    className={inputClasses.join(\" \")} \n                    value={props.value}\n                    onChange={props.changed}\n                >\n                    {props.elementConfig.options.map(option =>(\n                        <option value={option.value} key={option.value}>\n                            {option.displayValue}\n                        </option>\n                    ))}\n                </select>\n            );\n            break;    \n        default:\n            inputElement = <input \n                className={inputClasses.join(\" \")} \n                {...props.elementConfig} \n                value={props.value}\n                onChange={props.changed}/>\n    }\n    \n    return(\n        <div className={style.Input}>\n            <label className={style.Label}>{props.label}</label>\n            {inputElement}\n            {validationError}\n        </div>\n    );\n}\n\nexport default Input; ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__d5lcR\",\"Label\":\"Input_Label__s87Af\",\"InputElement\":\"Input_InputElement__t3rw5\",\"Invalid\":\"Input_Invalid__1s9cN\",\"ValidationError\":\"Input_ValidationError__kqcKz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__1PxuE\",\"ContactDataWrapper\":\"ContactData_ContactDataWrapper__3_2af\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"BurgerWrapper\":\"Summary_BurgerWrapper__3f2sK\",\"ButtonWrapper\":\"Summary_ButtonWrapper__1Q-3O\",\"Summary\":\"Summary_Summary__17Zq2\",\"Sumary\":\"Summary_Sumary__1Qc6X\"};","import React, {Component} from \"react\";\nimport Button from \"../../../components/UI/Button/Button\";\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\nimport Input from \"../../../components/UI/Input/Input\";\nimport style from \"./ContactData.module.css\";\nimport axios from \"../../../API/Axios/Axios-Orders\";\nimport {connect} from \"react-redux\";\nimport withErrorHandler from \"../../HOC/ErrorHandler/ErrorHandler\";\nimport * as orderActions from \"../../../store/actions/index\";\nimport {validationCheck} from \"../../../constants/utilities\";\n\nclass ContactData extends Component{\n    \n    state={\n        // elementConfig passed to Input via spread operator with props that automatically \n        // passes along the nested config object for required html attributes\n        orderForm:{\n            name: {\n                value: \"\",\n                elementType: \"input\",\n                elementConfig: {\n                    type: \"text\",\n                    placeholder: \"Name\"   \n                },\n                validation: {\n                    required: true,\n                    minLength: 3,\n                    valid: false\n                },\n                touched: false\n            },\n            street: {\n                value: \"\",\n                elementType: \"input\",\n                elementConfig: {\n                    type: \"text\",\n                    placeholder: \"Street\"   \n                },\n                validation: {\n                    required: true,\n                    minLength: 3,\n                    valid: false\n                },\n                touched: false\n            },\n            zipCode: {\n                value: \"\",\n                elementType: \"input\",\n                elementConfig: {\n                    type: \"text\",\n                    placeholder: \"Postal Code\"   \n                },\n                validation: {\n                    required: true,\n                    minLength: 3,\n                    maxLength: 10,\n                    valid: false\n                },\n                touched: false\n            },\n            country: {\n                value: \"\",\n                elementType: \"input\",\n                elementConfig: {\n                    type: \"text\",\n                    placeholder: \"Country\"   \n                },\n                validation: {\n                    required: true,\n                    minLength: 3,\n                    valid: false\n                },\n                touched: false\n            },\n            email: {\n                value: \"\",\n                elementType: \"input\",\n                elementConfig: {\n                    type: \"email\",\n                    placeholder: \"Email\"   \n                },\n                validation: {\n                    required: true,\n                    minLength: 3,\n                    maxLength: 100,\n                    valid: false\n                },\n                touched: false\n            },\n            deliveryMethod: {\n                value: \"fastest\",\n                elementType: \"select\",\n                elementConfig: {\n                    options: [\n                        {value: \"fastest\", displayValue: \"Fastest\"},\n                        {value: \"cheapest\", displayValue: \"Cheapest\"}\n                    ]\n                },\n                validation: {\n                    required: false,\n                    valid: false\n                },\n                touched: false\n            }\n        },\n        formIsValid: false\n    }\n\n    orderHandler = (event) =>{\n        event.preventDefault();\n        // console.log('Contact Data Props: ', this.props.ingredients);\n        const formData = {};\n        for(let key in this.state.orderForm){\n            formData[key] = this.state.orderForm[key].value;\n        }\n        // console.log(formData);\n\n        let order = {\n            ingredients: this.props.ings,\n            orderPrice: this.props.price,\n            orderData: formData,\n            userId: this.props.userId\n        }\n        \n        // Sets purchased to True in Redux\n        this.props.onOrderBurger(order, this.props.token);\n    }\n\n    inputChangeHandler = (event, id) =>{\n        // Input Values Stored In event.target.value\n        // console.log(event.target.value);\n        // Copy State So It Is Immutable\n        const updatedForm = {\n            ...this.state.orderForm\n        }\n        // Copy Nested Object \n        const updatedItem = {\n            ...updatedForm[id]\n        }\n        // Update Value Of Copied Nested Object\n        updatedItem.value = event.target.value;\n        // Run Validation\n        updatedItem.validation.valid = validationCheck(updatedItem.value, updatedItem.validation);\n        // Update To Show Input Was Modified\n        updatedItem.touched = true;\n        // Update Value Of Copied State With Copy Object\n        updatedForm[id] = updatedItem;\n\n        // Loop To Verify Form Is Valid\n        let formIsValid = true;\n        for (let elementItem in updatedForm){\n            if(updatedForm[elementItem].validation.required === true){\n                if(updatedForm[elementItem].validation.valid === false){\n                    formIsValid = false;\n                }\n            }\n        }\n\n        // Set State With The Copy Of State\n        this.setState({orderForm : updatedForm, formIsValid : formIsValid});\n    }\n\n    render(){\n\n        let formElements = [];\n        for(let key in this.state.orderForm){\n            formElements.push({\n                id: key,\n                config: this.state.orderForm[key]\n            })\n        };\n\n        let form = (\n            <form onSubmit={this.orderHandler}>\n                {formElements.map( element => (\n                    <Input \n                        key={element.id} \n                        elementType={element.config.elementType} \n                        elementConfig={element.config.elementConfig} \n                        value={element.config.value}\n                        invalid={!element.config.validation.valid}\n                        shouldValidate={element.config.validation.required}\n                        touched={element.config.touched}\n                        changed={(event)=>this.inputChangeHandler(event, element.id)}\n                    />\n                ))}\n                <Button btnType=\"Success\" disabled={!this.state.formIsValid}>Order</Button>\n            </form>\n        );\n        if(this.props.loading){\n            form=<Spinner/>\n        }\n\n        return(\n            <section className={style.ContactDataWrapper}>\n                <div className={style.ContactData} id=\"user-form\">\n                    <h4>Enter Contact Data</h4>\n                    {form}\n                </div>\n            </section>\n        );\n    }\n}\n\nconst mapStateToProps = (state) =>{\n    return{\n        ings: state.burgerBuilder.ingredients,\n        price: state.burgerBuilder.totalOrderPrice,\n        loading: state.order.loading,\n        token: state.auth.token,\n        userId: state.auth.userId\n    }   \n}\n\nconst mapDispatchToProps = (dispatch) =>{\n    return{\n        onOrderBurger: (orderData, token)=>dispatch(orderActions.purchaseBurger(orderData, token)) \n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","import React from \"react\";\nimport Burger from \"../../Burger/Burger\"\nimport Button from \"../../UI/Button/Button\";\n// import ScrollIntoView from 'react-scroll-into-view';\nimport ContactData from \"../../../containers/Checkout/ContactData/ContactData\";\n\nimport style from \"./Summary.module.css\";\n\n\nconst Summary = (props) =>{\n    return(\n        <div className={style.Summary}>\n            <h1>Order Summary</h1>\n            <div className={style.BurgerWrapper}>\n                <Burger ingredients={props.ingredients}/>\n            </div>\n            <ContactData />\n            <div className={style.ButtonWrapper}>\n                <Button btnType=\"Danger\" clicked={props.checkoutCancel}>Cancel Order</Button>\n                {/* Not Used \n                <Button btnType=\"Success\" clicked={props.checkoutContinue}>Order Now</Button>\n                */}\n\n            </div>\n        </div>\n    );\n}\n\nexport default Summary;","import React, {Component} from \"react\";\nimport Summary from \"../../components/Order/Summary/Summary\";\n// import ContactData from \"./ContactData/ContactData\";\nimport {Route, Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\n\nclass Checkout extends Component{\n\n    componentDidMount() {\n        window.scrollTo(0, 0);\n        document.getElementById(\"burger-wrap\").style.backgroundColor = \"transparent\";\n    }\n\n    cancelCheckout=()=>{\n        this.props.history.goBack();\n    }\n\n    continueCheckout=()=>{\n        this.props.history.replace(\"/checkout/contact-data\");\n    }\n    \n    render(){\n        // Redirects If No Ingredients (Happens If User Reloads Page)\n        let summary = <Redirect to=\"/\"/>;\n        if(this.props.ings){\n            const purchaseRedirect = this.props.purchased ? <Redirect to=\"/\"/> : null;\n            summary = (\n                <div>\n                    {purchaseRedirect}\n                    <Summary \n                        ingredients={this.props.ings}\n                        checkoutCancel={this.cancelCheckout}\n                        checkoutContinue={this.continueCheckout}\n                    />\n\n                    {/* Render Checkout -- not used\n                    <Route path={\"/checkout/contact-data\"} component={ContactData} />\n                    */}\n                    \n                </div>\n            )  \n        }\n        return summary;\n    }\n}\n\nconst mapStateToProps = (state) =>{\n    return{\n        ings: state.burgerBuilder.ingredients,\n        price: state.burgerBuilder.totalOrderPrice,\n        purchased: state.order.purchased\n    }   \n}\n\nexport default connect(mapStateToProps)(Checkout)   ;"],"sourceRoot":""}